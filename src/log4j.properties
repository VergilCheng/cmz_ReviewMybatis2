# 设置所有日志信息的输出级别、将信息输出到哪里
log4j.rootCategory=INFO, CONSOLE, LOGFILE

#设置局部或者指定日志信息的输出级别
log4j.logger.cn.uestc.mapper=DEBUG


# 负责向控制台输出所使用的类
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
# 向控制台输出的内容格式，由下列类来控制
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
# 向控制台输出的具体内容，可以用log4j表达式来表示我们要输出的内容是什么，详细可参考文档
log4j.appender.CONSOLE.layout.ConversionPattern=%c %p %d{YYYY/MM/dd hh:mm:ss} %F %m %n

# 负责向日志文件输出所使用的类
log4j.appender.LOGFILE=org.apache.log4j.FileAppender
# 向具体哪个目录下的日志文件进行输出,如果写相对路径，则在当前项目文件目录下输出，输出位置与src目录同级
# 如果写绝对路径，linux系统则会在根目录下创建文件夹和文件，如果windows系统，则会根据当前项目在哪个磁盘分区
# 并在该磁盘分区下创建文件夹和文件。例如如下/log/mybatis/sql.log表示在windows系统下创建文件，位置为F:/logs/mybatis/sql.log
log4j.appender.LOGFILE.File=/logs/mybatis/sql.log
# 向日志文件输出的IO是追加还是非追加，肯定设置为可追加
log4j.appender.LOGFILE.Append=true
# 向日志文件输出的内容格式，由下列类来控制
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
# 向日志文件输出的具体内容，可以用log4j表达式来表示我们要输出的内容是什么，详细可参考文档
log4j.appender.LOGFILE.layout.ConversionPattern=%C %L %m %n
